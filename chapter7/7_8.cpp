#include <iostream>
#include <math.h>
#include <stdlib.h>
#include <cstring>
#include <string>
#include <iomanip>
#include <sstream>
#include <algorithm>
using namespace std;
class money
{
    public:
        long double mstold(char const str[])
        {
            char s[20];
            int n = strlen(str);
            int k = 0;
            for (int i =0;i<n;i++)
            {
                if (str[i] == '.')
                    s[k++]= '.';
                else if (str[i] == '\0' )
                    break;
                else if (str[i]-'0'>=10 || str[i]-'0'<0)
                    continue;
                else
                    s[k++] = str[i];
            }
            s[k] = '\0';
            return stold(s);
        }
        string ldtoms( long double n)
        {
            ostringstream n_str; // –ø–æ—Ç–æ–∫ –≤—ã–≤–æ–¥–∞ –≤ —Å—Ç—Ä–æ–∫—É
            n_str << n; // –∑–∞–ø–∏—Å—å –≤ –ø–æ—Ç–æ–∫

            string bufstring = n_str.str(); // –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
            size_t point_ind = bufstring.find('.');

            string frac_part = "";
            if (point_ind != string::npos)
            {
                frac_part = bufstring.substr(point_ind);
            }
            else
                point_ind = bufstring.size();

            int indent_number = point_ind%3;
            string whole_part = bufstring.substr(0, indent_number);
            if (indent_number != 0 )
                whole_part += ' ';

            for (int i= indent_number; i<point_ind;i+= 3)
                whole_part+= bufstring.substr(i,3)+" ";
            whole_part.pop_back();

            return "$"+whole_part+frac_part;
        }
};

class bMoney
{
    private:
        long double money_b;
    public:
        bMoney();
        bMoney(const char s[]);
//–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ explicit –≤ C++ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è, —á—Ç–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
// –Ω–µ –¥–æ–ª–∂–µ–Ω —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–µ—è–≤–Ω—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è—Ö —Ç–∏–ø–æ–≤.
        explicit bMoney(long double l): money_b(l)
            {}
        void getmoney()
        {
            char number_money[20];
            cin>>number_money;
            money str_to_num;
            money_b = str_to_num.mstold(number_money);
        }
/*–î–∞, –≤ –≤–∞—à–µ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ explicit –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
long double –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–µ–ª–µ–Ω–∏—è.*/

        void putmoney()
        {   cout<<money_b<<endl;}
        bMoney operator+(bMoney m1)
        {   return bMoney (money_b+m1.money_b);}
        bMoney operator-(bMoney m1)
        {   return bMoney (money_b-m1.money_b);}
        bMoney operator*(long double m1)
        {   return bMoney (money_b*m1);}
        bMoney operator/(long double m1)
        {   cout<<"THIS one"<<endl; return bMoney (money_b/m1);}
        bMoney operator/(bMoney m1)
        {   cout<<"THIS second"<<endl; return bMoney (money_b/m1.money_b);}

};
bMoney::bMoney(): money_b(0)
    {}
bMoney::bMoney(const char s[])
{
    money str_to_num;
    money_b = str_to_num.mstold(s);
}




int main()
{
    bMoney m1("$1235.23"),m2("$333.22"),m3;
    long double l = 12.5;

    m3 = m1/12.5;
    m3.putmoney();

    m3 = m1/m2;



    return 0;
}
/*–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ explicit –≤ C++ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è, —á—Ç–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–µ—è–≤–Ω—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è—Ö —Ç–∏–ø–æ–≤.

üìå –ì–¥–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è:
–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã —Å –æ–¥–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
–ë–µ–∑ explicit –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–µ—è–≤–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å —Ç–∏–ø—ã, —á—Ç–æ –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–µ–æ—á–µ–≤–∏–¥–Ω–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é.

–ü—Ä–∏–º–µ—Ä –±–µ–∑ explicit:

cpp
class MyClass {
public:
    MyClass(int x) : value(x) {}
private:
    int value;
};

void func(MyClass obj) {}

int main() {
    func(42);  // –ù–µ—è–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ int ‚Üí MyClass
    return 0;
}
–ó–¥–µ—Å—å 42 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ MyClass, —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ.

–° explicit:

cpp
class MyClass {
public:
    explicit MyClass(int x) : value(x) {}
private:
    int value;
};

void func(MyClass obj) {}

int main() {
    // func(42);  // –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ ‚Äì —Ç—Ä–µ–±—É–µ—Ç—Å—è —è–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    func(MyClass(42));  // OK
    return 0;
}
–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (C++11 –∏ –Ω–æ–≤–µ–µ)
–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –Ω–µ—è–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–ª–∞—Å—Å–∞ –∫ –¥—Ä—É–≥–æ–º—É —Ç–∏–ø—É.

–ü—Ä–∏–º–µ—Ä:

cpp
class MyClass {
public:
    explicit operator bool() const {
        return value != 0;
    }
private:
    int value;
};

int main() {
    MyClass obj{10};
    // bool b = obj;  // –û—à–∏–±–∫–∞ ‚Äì —Ç—Ä–µ–±—É–µ—Ç—Å—è —è–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    bool b = static_cast<bool>(obj);  // OK
    return 0;
}
üîπ –í—ã–≤–æ–¥:
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ explicit, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –Ω–µ—è–≤–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã. –≠—Ç–æ —É–ª—É—á—à–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤ –∏ –¥–µ–ª–∞–µ—Ç –∫–æ–¥ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–º.*/
