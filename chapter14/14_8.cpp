#include <iostream>
#include <algorithm>

using namespace std;


int main()
{
    int arr[12] = {0,1,2,3,4,5,6,7,8,9,10,11};

    int first1,last1,first2;
    cin>>first1>>last1>>first2;

    if (first1>= first2)
        copy(arr+first1,arr+last1,arr+first2);
//–¢–∞–∫ –¥–µ–ª–∞–µ—Ç—Å—è –ø–æ—Ç–æ–º—É, —á—Ç–æ copy() –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Å–∞–º–æ–≥–æ
// –∫—Ä–∞–π–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ª–µ–≤–∞.
/*–ü—Ä–æ–±–ª–µ–º–∞ –æ–±—ã—á–Ω–æ–≥–æ std::copy –ø—Ä–∏ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–∏
–ï—Å–ª–∏ —Ü–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è (first2) –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–∞–≤–µ–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ([first1, last1)), –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç—Å—è, —Ç–æ std::copy –±—É–¥–µ—Ç –ø–æ—Ä—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.

–ü—Ä–∏–º–µ—Ä (–∫–∞–∫ –ù–ï –Ω–∞–¥–æ –¥–µ–ª–∞—Ç—å):
cpp
std::vector<int> data = {1, 2, 3, 4, 5};

// –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å [2,3,4] (–∏–Ω–¥–µ–∫—Å—ã 1-3) –≤ –ø–æ–∑–∏—Ü–∏—é 2 (–∏–Ω–¥–µ–∫—Å—ã 2-4)
std::copy(data.begin() + 1, data.begin() + 4, data.begin() + 2);

// –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [1, 2, 2, 3, 4]
// –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: [1, 2, 2, 2, 2]  üò± –î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ—Ä—á–µ–Ω—ã!
–ü–æ—á–µ–º—É?
std::copy –∫–æ–ø–∏—Ä—É–µ—Ç –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ:

–°–Ω–∞—á–∞–ª–∞ –∫–æ–ø–∏—Ä—É–µ—Ç data[1] (–∑–Ω–∞—á–µ–Ω–∏–µ 2) –≤ data[2] ‚Üí [1, 2, 2, 4, 5].

–ü–æ—Ç–æ–º data[2] (—É–∂–µ 2) –≤ data[3] ‚Üí [1, 2, 2, 2, 5].

–ó–∞—Ç–µ–º data[3] (—Ç–µ–ø–µ—Ä—å 2) –≤ data[4] ‚Üí [1, 2, 2, 2, 2]*/
    else
        {
            int* buffer = new int [last1-first1];
            copy(arr+first1,arr+last1,buffer);
            copy(buffer,buffer+last1-first1,arr+first2);
            delete [] buffer ;
        }
    for (int i=0;i<12;i++)
        cout<<arr[i]<<endl;


    return 0;
}
