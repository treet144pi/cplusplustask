#include <iostream>
using namespace std;
/*
виртуальный деструктор
*/
class A
{
    public:
    A()
    {
        cout<<"CREATE A"<<endl;
    }
    virtual ~A()
    {
        cout<<"FREE A"<<endl;
    }

};
class B:public A
{
    public:
    B()
    {
        cout<<"CREATE B"<<endl;
    }
    ~B() override //чтобы компилятор проконтролировал что переопределили
    {
        cout<<"FREE B"<<endl;
    }
};



int main()
{
    // B b;//вначале создается конструктор класса А потом класса Б а удаляется наоборот
    // B *bptr = new B;
    // delete bptr; // аналогично ничего нового

//вспомним что указатель на базовый класс может  хранить ссылки на своих потомков поэтому
    A *bptr = new B;//без виртуального деструкторы память обьекта класса Б остается и не освобождаются( утечка памяти)
//после этого виртуального деструктора у нас теперь все праивльно вызывается
//благодаря виртуальным деструкторам  поведение определяется типом обьекта а не типом указателя
//если класс предназначен для наследования т е хотя бы одна его функция виртуальная то его деструктор должен быть виртуальным
/*
когда обьект создается на стекуе как локальная переменная его деструктор
вызывается автоматически при выходе из области видимости
если обьект создается в куче динамически через new  то деструктор не вызыввается автоматиески
необходимо явно вызвать delete чтобы освободить память и вызвать деструктор
*/
    delete bptr;
    return 0;
}
